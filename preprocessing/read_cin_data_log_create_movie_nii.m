%% read .cin file generated by Quantel and EyeScan system to create visualization.

clear all;clc;close all;

data_dir = 'D:\My Drive\madhu-01x20x2023\';

data_name = [data_dir '555-250418-134419.cin'];

data = fileread(data_name);
disp('finish reading cin file')

%%
% the original data is 2048x384xnumber of frames; most of it is empty space so we crop it to 1100x384 x number of frames
row_bytes = 2048;
num_rows = 384;
cin_header_bytes = 8;
cropped_row_bytes = 1100;
iso_xyz_resolution = 0.025; %0.025 mm, this is ideal for visualization. Can be chosen a larger value i.e., 0.05 mm to make volumes fit into memory

%%
log_file_name = [data_dir '2018-04-25-132902.log'];
log_file = fileread(log_file_name);
x_spacing_end = regexp(log_file, 'x_spacing = ','end');
y_spacing_start = regexp(log_file, 'y_spacing = ');
y_spacing_end = regexp(log_file, 'y_spacing = ','end');
z_spacing_start = regexp(log_file, 'z_spacing = ');
z_spacing_end = regexp(log_file, 'z_spacing = ','end');
comment_start = regexp(log_file, 'comment = ');
x_spacing = str2num(log_file(x_spacing_end:y_spacing_start-1));
y_spacing = str2num(log_file(y_spacing_end:z_spacing_start-1));
z_spacing = str2num(log_file(z_spacing_end:comment_start-1));
disp('finish reading log file')

%%
data_use = double(uint8(data));
cin_size_bytes = length(data_use)

num_frames = 0
frame_header_bytes = 0
for i_frame= 1: 1505
    for i_header = 500: 900
        if i_frame * (row_bytes*num_rows + i_header) + cin_header_bytes == cin_size_bytes
            num_frames = i_frame
            frame_header_bytes = i_header
            break
        end
        if num_frames > 0
            break
        end
    end
end

%%
data_after_head = data(1,cin_header_bytes+1:end);
data_length = row_bytes*num_rows;
data_volume = zeros(row_bytes, num_rows, num_frames);
data_volume_cropped = zeros(cropped_row_bytes, num_rows, num_frames);

for i = 1 : num_frames
    one_frame = (i - 1)*(data_length + frame_header_bytes);
    image_index = one_frame + frame_header_bytes;
    frame = data_after_head(image_index+1:image_index+data_length);
    frame = reshape(frame, [row_bytes num_rows]);
    cropped_frame = frame(401:1500,:);
    data_volume(:,:,i) = frame;
    data_volume_cropped(:,:,i) = cropped_frame;
end

% %% make isotropic volume
% [y,x,z] = size(data_volume_cropped);
% physical_x = x*x_spacing;
% physical_y = y*y_spacing;
% physical_z = z*z_spacing;
% numcols = round(physical_x)/iso_xyz_resolution;
% numrows = round(physical_y)/iso_xyz_resolution;
% numplanes = round(physical_z)/iso_xyz_resolution;
% V = imresize3(data_volume_cropped,[numrows numcols numplanes]);
% disp('finish making isotropic data');

% outputVideo = VideoWriter([data_name(1:end-4) '.mp4'], 'MPEG-4');
% open(outputVideo);
% 
% for i = 1:size(V,3)
%     writeVideo(outputVideo, uint8(V(:,:,i)));
% end
% 
% close(outputVideo);